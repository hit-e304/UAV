# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mission_planner1/UAVState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mavros_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class UAVState(genpy.Message):
  _md5sum = "eae4a5d2f481a147e42719a9b469620f"
  _type = "mission_planner1/UAVState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """mavros_msgs/State UAV_state
geometry_msgs/PoseStamped UAV_pose
geometry_msgs/TwistStamped UAV_velocity_body
================================================================================
MSG: mavros_msgs/State
# Current autopilot state
#
# Known modes listed here:
# http://wiki.ros.org/mavros/CustomModes
#
# For system_status values
# see https://mavlink.io/en/messages/common.html#MAV_STATE
#

std_msgs/Header header
bool connected
bool armed
bool guided
bool manual_input
string mode
uint8 system_status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['UAV_state','UAV_pose','UAV_velocity_body']
  _slot_types = ['mavros_msgs/State','geometry_msgs/PoseStamped','geometry_msgs/TwistStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       UAV_state,UAV_pose,UAV_velocity_body

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UAVState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.UAV_state is None:
        self.UAV_state = mavros_msgs.msg.State()
      if self.UAV_pose is None:
        self.UAV_pose = geometry_msgs.msg.PoseStamped()
      if self.UAV_velocity_body is None:
        self.UAV_velocity_body = geometry_msgs.msg.TwistStamped()
    else:
      self.UAV_state = mavros_msgs.msg.State()
      self.UAV_pose = geometry_msgs.msg.PoseStamped()
      self.UAV_velocity_body = geometry_msgs.msg.TwistStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.UAV_state.header.seq, _x.UAV_state.header.stamp.secs, _x.UAV_state.header.stamp.nsecs))
      _x = self.UAV_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.UAV_state.connected, _x.UAV_state.armed, _x.UAV_state.guided, _x.UAV_state.manual_input))
      _x = self.UAV_state.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.UAV_state.system_status, _x.UAV_pose.header.seq, _x.UAV_pose.header.stamp.secs, _x.UAV_pose.header.stamp.nsecs))
      _x = self.UAV_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.UAV_pose.pose.position.x, _x.UAV_pose.pose.position.y, _x.UAV_pose.pose.position.z, _x.UAV_pose.pose.orientation.x, _x.UAV_pose.pose.orientation.y, _x.UAV_pose.pose.orientation.z, _x.UAV_pose.pose.orientation.w, _x.UAV_velocity_body.header.seq, _x.UAV_velocity_body.header.stamp.secs, _x.UAV_velocity_body.header.stamp.nsecs))
      _x = self.UAV_velocity_body.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.UAV_velocity_body.twist.linear.x, _x.UAV_velocity_body.twist.linear.y, _x.UAV_velocity_body.twist.linear.z, _x.UAV_velocity_body.twist.angular.x, _x.UAV_velocity_body.twist.angular.y, _x.UAV_velocity_body.twist.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.UAV_state is None:
        self.UAV_state = mavros_msgs.msg.State()
      if self.UAV_pose is None:
        self.UAV_pose = geometry_msgs.msg.PoseStamped()
      if self.UAV_velocity_body is None:
        self.UAV_velocity_body = geometry_msgs.msg.TwistStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.UAV_state.header.seq, _x.UAV_state.header.stamp.secs, _x.UAV_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.UAV_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.UAV_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.UAV_state.connected, _x.UAV_state.armed, _x.UAV_state.guided, _x.UAV_state.manual_input,) = _get_struct_4B().unpack(str[start:end])
      self.UAV_state.connected = bool(self.UAV_state.connected)
      self.UAV_state.armed = bool(self.UAV_state.armed)
      self.UAV_state.guided = bool(self.UAV_state.guided)
      self.UAV_state.manual_input = bool(self.UAV_state.manual_input)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.UAV_state.mode = str[start:end].decode('utf-8')
      else:
        self.UAV_state.mode = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.UAV_state.system_status, _x.UAV_pose.header.seq, _x.UAV_pose.header.stamp.secs, _x.UAV_pose.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.UAV_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.UAV_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.UAV_pose.pose.position.x, _x.UAV_pose.pose.position.y, _x.UAV_pose.pose.position.z, _x.UAV_pose.pose.orientation.x, _x.UAV_pose.pose.orientation.y, _x.UAV_pose.pose.orientation.z, _x.UAV_pose.pose.orientation.w, _x.UAV_velocity_body.header.seq, _x.UAV_velocity_body.header.stamp.secs, _x.UAV_velocity_body.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.UAV_velocity_body.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.UAV_velocity_body.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.UAV_velocity_body.twist.linear.x, _x.UAV_velocity_body.twist.linear.y, _x.UAV_velocity_body.twist.linear.z, _x.UAV_velocity_body.twist.angular.x, _x.UAV_velocity_body.twist.angular.y, _x.UAV_velocity_body.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.UAV_state.header.seq, _x.UAV_state.header.stamp.secs, _x.UAV_state.header.stamp.nsecs))
      _x = self.UAV_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.UAV_state.connected, _x.UAV_state.armed, _x.UAV_state.guided, _x.UAV_state.manual_input))
      _x = self.UAV_state.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.UAV_state.system_status, _x.UAV_pose.header.seq, _x.UAV_pose.header.stamp.secs, _x.UAV_pose.header.stamp.nsecs))
      _x = self.UAV_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.UAV_pose.pose.position.x, _x.UAV_pose.pose.position.y, _x.UAV_pose.pose.position.z, _x.UAV_pose.pose.orientation.x, _x.UAV_pose.pose.orientation.y, _x.UAV_pose.pose.orientation.z, _x.UAV_pose.pose.orientation.w, _x.UAV_velocity_body.header.seq, _x.UAV_velocity_body.header.stamp.secs, _x.UAV_velocity_body.header.stamp.nsecs))
      _x = self.UAV_velocity_body.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.UAV_velocity_body.twist.linear.x, _x.UAV_velocity_body.twist.linear.y, _x.UAV_velocity_body.twist.linear.z, _x.UAV_velocity_body.twist.angular.x, _x.UAV_velocity_body.twist.angular.y, _x.UAV_velocity_body.twist.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.UAV_state is None:
        self.UAV_state = mavros_msgs.msg.State()
      if self.UAV_pose is None:
        self.UAV_pose = geometry_msgs.msg.PoseStamped()
      if self.UAV_velocity_body is None:
        self.UAV_velocity_body = geometry_msgs.msg.TwistStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.UAV_state.header.seq, _x.UAV_state.header.stamp.secs, _x.UAV_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.UAV_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.UAV_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.UAV_state.connected, _x.UAV_state.armed, _x.UAV_state.guided, _x.UAV_state.manual_input,) = _get_struct_4B().unpack(str[start:end])
      self.UAV_state.connected = bool(self.UAV_state.connected)
      self.UAV_state.armed = bool(self.UAV_state.armed)
      self.UAV_state.guided = bool(self.UAV_state.guided)
      self.UAV_state.manual_input = bool(self.UAV_state.manual_input)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.UAV_state.mode = str[start:end].decode('utf-8')
      else:
        self.UAV_state.mode = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.UAV_state.system_status, _x.UAV_pose.header.seq, _x.UAV_pose.header.stamp.secs, _x.UAV_pose.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.UAV_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.UAV_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.UAV_pose.pose.position.x, _x.UAV_pose.pose.position.y, _x.UAV_pose.pose.position.z, _x.UAV_pose.pose.orientation.x, _x.UAV_pose.pose.orientation.y, _x.UAV_pose.pose.orientation.z, _x.UAV_pose.pose.orientation.w, _x.UAV_velocity_body.header.seq, _x.UAV_velocity_body.header.stamp.secs, _x.UAV_velocity_body.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.UAV_velocity_body.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.UAV_velocity_body.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.UAV_velocity_body.twist.linear.x, _x.UAV_velocity_body.twist.linear.y, _x.UAV_velocity_body.twist.linear.z, _x.UAV_velocity_body.twist.angular.x, _x.UAV_velocity_body.twist.angular.y, _x.UAV_velocity_body.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
